name: PR Lint Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'frontend/**/*.{js,jsx,ts,tsx,json}'
      - 'backend/**/*.{py}'
      - '*.py'
      - 'requirements.txt'
      - 'package*.json'
      - 'pnpm-lock.yaml'
      - 'Dockerfile'
      - 'docker-compose.yml'

jobs:
  frontend-lint:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'frontend/') || contains(github.event.pull_request.changed_files, 'package.json') || contains(github.event.pull_request.changed_files, 'pnpm-lock.yaml')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Run frontend lint
        run: |
          cd frontend
          # Check if eslint is available in package.json
          if grep -q "eslint" package.json; then
            echo "Running ESLint..."
            npx eslint src/ --ext .js,.jsx,.ts,.tsx
          else
            echo "ESLint not found in package.json, skipping lint check"
          fi

      - name: Run frontend type check
        run: |
          cd frontend
          # TypeScript type checking
          npx tsc --noEmit

      - name: Run frontend build test
        run: |
          cd frontend
          pnpm build

  backend-lint:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'backend/') || contains(github.event.pull_request.changed_files, '*.py') || contains(github.event.pull_request.changed_files, 'requirements.txt')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install linting tools
        run: |
          pip install flake8 black isort mypy

      - name: Run Black code formatting check
        run: |
          cd backend
          black --check --diff .

      - name: Run isort import sorting check
        run: |
          cd backend
          isort --check-only --diff .

      - name: Run Flake8 linting
        run: |
          cd backend
          flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy type checking
        run: |
          cd backend
          # MyPy type checking with basic configuration
          mypy . --ignore-missing-imports --no-strict-optional || true

  docker-build:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'docker-compose.yml')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: tggod:pr-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker compose config
        run: |
          # Validate docker-compose.yml syntax
          docker compose config

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  pr-size-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const changes = additions + deletions;

            console.log(`PR changes: +${additions} -${deletions} (total: ${changes})`);

            if (changes > 1000) {
              core.setFailed(`PR is too large (${changes} changes). Consider breaking it into smaller PRs.`);
            } else if (changes > 500) {
              console.log(`⚠️ Large PR detected (${changes} changes). Consider reviewing carefully.`);
            } else {
              console.log(`✅ PR size is reasonable (${changes} changes).`);
            }

  conventional-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check conventional commits
        run: |
          # Get PR commits
          PR_COMMITS=$(git log --pretty=format:"%s" origin/${{ github.base_ref }}..HEAD)

          echo "Checking commits for conventional format..."
          VALID=true

          while IFS= read -r commit; do
            if [[ ! "$commit" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
              echo "❌ Invalid commit format: $commit"
              echo "Expected format: type(scope): description"
              echo "Valid types: feat, fix, docs, style, refactor, test, chore"
              VALID=false
            else
              echo "✅ Valid commit: $commit"
            fi
          done <<< "$PR_COMMITS"

          if [ "$VALID" = false ]; then
            echo ""
            echo "Please use conventional commit format:"
            echo "feat: add new feature"
            echo "fix: fix bug"
            echo "docs: update documentation"
            echo "style: format code"
            echo "refactor: refactor code"
            echo "test: add tests"
            echo "chore: maintenance tasks"
            exit 1
          fi

  dependencies-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for dependency vulnerabilities (Python)
        run: |
          if [ -f "backend/requirements.txt" ]; then
            pip install safety
            cd backend
            safety check -r requirements.txt || true
          fi

      - name: Check for dependency vulnerabilities (Node.js)
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend
            npm audit || true
          fi