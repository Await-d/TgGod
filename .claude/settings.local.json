{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "Bash(ls:*)",
      "Bash(npm create:*)",
      "Bash(mkdir:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "mcp__serena__initial_instructions",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__activate_project",
      "mcp__serena__onboarding",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__list_dir",
      "mcp__serena__write_memory",
      "mcp__serena__read_memory",
      "mcp__serena__find_symbol",
      "mcp__serena__replace_regex",
      "mcp__serena__search_for_pattern",
      "mcp__serena__think_about_whether_you_are_done",
      "Bash(npm run lint)",
      "Bash(mv:*)",
      "mcp__serena__summarize_changes",
      "Bash(find:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "mcp__serena__list_memories",
      "mcp__serena__get_current_config",
      "mcp__serena__execute_shell_command",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "mcp__serena__read_file",
      "Bash(pkill:*)",
      "mcp__serena__create_text_file",
      "Bash(pip install:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm dev:*)",
      "Bash(pnpm add:*)",
      "Bash(PORT=3000 pnpm start)",
      "Bash(pnpm build:*)",
      "Bash(grep:*)",
      "Bash(python:*)",
      "Bash(git push:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(git remote set-url:*)",
      "Bash(touch:*)",
      "Bash(rm -rf node_modules)",
      "Bash(CI=false pnpm build)",
      "Bash(docker build:*)",
      "Bash(git pull:*)",
      "WebFetch(domain:192.168.123.5)",
      "Bash(chmod:*)",
      "Bash(timeout:*)",
      "Bash(alembic revision:*)",
      "Bash(alembic upgrade:*)",
      "Bash(cat:*)",
      "Bash(npm start)",
      "Bash(serve:*)",
      "Bash(BROWSER=none PORT=3000 npm start)",
      "mcp__serena__replace_symbol_body",
      "Bash(npm test:*)",
      "mcp__serena__insert_before_symbol",
      "Bash(cd /root/project/TgGod/backend)",
      "Bash(rm /root/project/TgGod/frontend/src/pages/TelegramSettings.tsx /root/project/TgGod/frontend/src/pages/TelegramSettings.css)",
      "Bash(rm:*)",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__find_file",
      "Bash(kill:*)",
      "mcp__serena__insert_at_line",
      "mcp__serena__think_about_collected_information",
      "Bash(cp:*)",
      "mcp__serena__replace_lines",
      "Bash(npm run:*)",
      "mcp__serena__insert_after_symbol",
      "Bash(node:*)",
      "Bash(sqlite3:*)",
      "Bash(npm cache clean:*)",
      "Bash(export TELEGRAM_API_ID=27902826)",
      "Bash(export TELEGRAM_API_HASH=76e23a2f92b8a3a75963d851fbcb4384)",
      "Bash(TELEGRAM_API_ID=27902826 TELEGRAM_API_HASH=76e23a2f92b8a3a75963d851fbcb4384 python:*)",
      "Bash(export DATABASE_URL=\"sqlite:////app/data/tggod.db\")",
      "Bash(echo)",
      "Bash(convert:*)",
      "Bash(ping:*)",
      "Bash(docker-compose config:*)",
      "Bash(docker exec:*)",
      "Bash(DATABASE_URL=\"sqlite:///data/tggod_test.db\" python check_database.py)",
      "Bash(docker logs:*)",
      "Bash(DATABASE_URL=\"sqlite:///data/test_empty.db\" python check_database.py)",
      "Bash(systemctl:*)",
      "Bash(DATABASE_URL=\"sqlite:////app/data/tggod.db\" python -c \"\nimport sqlite3\nconn = sqlite3.connect(''/app/data/tggod.db'')\ncursor = conn.cursor()\n\n# 手动执行数据库迁移，确保字段存在\ntry:\n    cursor.execute(''ALTER TABLE telegram_messages ADD COLUMN test_column TEXT'')\n    print(''可以添加列'')\n    cursor.execute(''ALTER TABLE telegram_messages DROP COLUMN test_column'')\n    print(''可以删除列'')\nexcept Exception as e:\n    print(f''数据库操作权限测试: {e}'')\n\n# 验证所有字段\ncursor.execute(''PRAGMA table_info(telegram_messages)'')\ncolumns = cursor.fetchall()\ncolumn_names = [col[1] for col in columns]\nrequired_fields = [''media_file_id'', ''media_file_unique_id'', ''media_downloaded'', ''media_download_url'', ''media_download_error'', ''media_thumbnail_path'']\nfor field in required_fields:\n    if field in column_names:\n        print(f''✓ {field} 存在'')\n    else:\n        print(f''✗ {field} 缺失'')\n\nconn.close()\n\")",
      "Bash(./pre_deploy_fix.sh:*)",
      "Bash(npx tsc:*)",
      "Bash(env)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "mcp__ide__getDiagnostics"
    ],
    "deny": []
  }
}