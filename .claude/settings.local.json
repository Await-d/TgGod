{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "Bash(ls:*)",
      "Bash(npm create:*)",
      "Bash(mkdir:*)",
      "Bash(npm install:*)",
      "mcp__serena__initial_instructions",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__activate_project",
      "mcp__serena__onboarding",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__list_dir",
      "mcp__serena__write_memory",
      "mcp__serena__read_memory",
      "mcp__serena__find_symbol",
      "mcp__serena__replace_regex",
      "mcp__serena__search_for_pattern",
      "mcp__serena__think_about_whether_you_are_done",
      "Bash(npm run lint)",
      "Bash(mv:*)",
      "mcp__serena__summarize_changes",
      "Bash(find:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "mcp__serena__list_memories",
      "mcp__serena__get_current_config",
      "mcp__serena__execute_shell_command",
      "Bash(curl:*)",
      "mcp__serena__read_file",
      "Bash(pkill:*)",
      "mcp__serena__create_text_file",
      "Bash(pip install:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm dev:*)",
      "Bash(pnpm add:*)",
      "Bash(PORT=3000 pnpm start)",
      "Bash(grep:*)",
      "Bash(python:*)",
      "Bash(git push:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(git remote set-url:*)",
      "Bash(touch:*)",
      "Bash(rm -rf node_modules)",
      "Bash(git pull:*)",
      "WebFetch(domain:192.168.123.5)",
      "Bash(chmod:*)",
      "Bash(timeout:*)",
      "Bash(alembic revision:*)",
      "Bash(alembic upgrade:*)",
      "Bash(cat:*)",
      "Bash(npm start)",
      "Bash(serve:*)",
      "Bash(BROWSER=none PORT=3000 npm start)",
      "mcp__serena__replace_symbol_body",
      "Bash(npm test:*)",
      "mcp__serena__insert_before_symbol",
      "Bash(cd /root/project/TgGod/backend)",
      "Bash(rm /root/project/TgGod/frontend/src/pages/TelegramSettings.tsx /root/project/TgGod/frontend/src/pages/TelegramSettings.css)",
      "Bash(rm:*)",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__find_file",
      "Bash(kill:*)",
      "mcp__serena__insert_at_line",
      "mcp__serena__think_about_collected_information",
      "Bash(cp:*)",
      "mcp__serena__replace_lines",
      "mcp__serena__insert_after_symbol",
      "Bash(node:*)",
      "Bash(sqlite3:*)",
      "Bash(npm cache clean:*)",
      "Bash(export TELEGRAM_API_ID=27902826)",
      "Bash(export TELEGRAM_API_HASH=76e23a2f92b8a3a75963d851fbcb4384)",
      "Bash(TELEGRAM_API_ID=27902826 TELEGRAM_API_HASH=76e23a2f92b8a3a75963d851fbcb4384 python:*)",
      "Bash(export DATABASE_URL=\"sqlite:////app/data/tggod.db\")",
      "Bash(echo)",
      "Bash(convert:*)",
      "Bash(ping:*)",
      "Bash(docker exec:*)",
      "Bash(DATABASE_URL=\"sqlite:///data/tggod_test.db\" python check_database.py)",
      "Bash(docker logs:*)",
      "Bash(DATABASE_URL=\"sqlite:///data/test_empty.db\" python check_database.py)",
      "Bash(systemctl:*)",
      "Bash(DATABASE_URL=\"sqlite:////app/data/tggod.db\" python -c \"\nimport sqlite3\nconn = sqlite3.connect(''/app/data/tggod.db'')\ncursor = conn.cursor()\n\n# 手动执行数据库迁移，确保字段存在\ntry:\n    cursor.execute(''ALTER TABLE telegram_messages ADD COLUMN test_column TEXT'')\n    print(''可以添加列'')\n    cursor.execute(''ALTER TABLE telegram_messages DROP COLUMN test_column'')\n    print(''可以删除列'')\nexcept Exception as e:\n    print(f''数据库操作权限测试: {e}'')\n\n# 验证所有字段\ncursor.execute(''PRAGMA table_info(telegram_messages)'')\ncolumns = cursor.fetchall()\ncolumn_names = [col[1] for col in columns]\nrequired_fields = [''media_file_id'', ''media_file_unique_id'', ''media_downloaded'', ''media_download_url'', ''media_download_error'', ''media_thumbnail_path'']\nfor field in required_fields:\n    if field in column_names:\n        print(f''✓ {field} 存在'')\n    else:\n        print(f''✗ {field} 缺失'')\n\nconn.close()\n\")",
      "Bash(./pre_deploy_fix.sh:*)",
      "Bash(npx tsc:*)",
      "Bash(env)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "mcp__ide__getDiagnostics",
      "Bash(true)",
      "Bash(alembic:*)",
      "Bash(npx eslint:*)",
      "Bash(PYTHONPATH=/root/project/tg python migrations/add_rule_sync_tracking.py)",
      "Bash(PYTHONPATH=/root/project/tg python -c \"\nfrom backend.app.database import get_db\nfrom backend.app.models.rule import DownloadTask, FilterRule\nfrom backend.app.models.telegram import TelegramGroup\nfrom datetime import datetime, timezone\nimport logging\n\n# 禁用详细日志\nlogging.getLogger().setLevel(logging.ERROR)\n\ndb = next(get_db())\n\n# 创建一个测试群组（如果不存在）\ngroup = db.query(TelegramGroup).first()\nif not group:\n    group = TelegramGroup(\n        id=1,\n        title=''Test Group'',\n        username=''test_group'',\n        chat_id=-1001234567890,\n        member_count=100,\n        description=''Test group for task management'',\n        is_active=True\n    )\n    db.add(group)\n    db.commit()\n    print(''创建了测试群组'')\nelse:\n    print(f''使用现有群组: {group.title}'')\n\n# 创建一个测试规则（如果不存在）\nrule = db.query(FilterRule).first()\nif not rule:\n    rule = FilterRule(\n        name=''Test Rule'',\n        group_id=group.id,\n        keywords=[''test''],\n        media_types=[''photo'', ''video''],\n        is_active=True\n    )\n    db.add(rule)\n    db.commit()\n    print(''创建了测试规则'')\nelse:\n    print(f''使用现有规则: {rule.name}'')\n\n# 创建一些测试任务\nexisting_tasks = db.query(DownloadTask).count()\nif existing_tasks == 0:\n    tasks = [\n        DownloadTask(\n            name=''测试任务 - 待执行'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test1'',\n            status=''pending'',\n            progress=0,\n            total_messages=0,\n            downloaded_messages=0\n        ),\n        DownloadTask(\n            name=''测试任务 - 运行中'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test2'',\n            status=''running'',\n            progress=45,\n            total_messages=100,\n            downloaded_messages=45\n        ),\n        DownloadTask(\n            name=''测试任务 - 已完成'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test3'',\n            status=''completed'',\n            progress=100,\n            total_messages=50,\n            downloaded_messages=50\n        ),\n        DownloadTask(\n            name=''测试任务 - 已暂停'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test4'',\n            status=''paused'',\n            progress=30,\n            total_messages=80,\n            downloaded_messages=24\n        ),\n        DownloadTask(\n            name=''测试任务 - 失败'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test5'',\n            status=''failed'',\n            progress=20,\n            total_messages=60,\n            downloaded_messages=12,\n            error_message=''测试错误消息''\n        )\n    ]\n    \n    for task in tasks:\n        db.add(task)\n    \n    db.commit()\n    print(f''创建了 {len(tasks)} 个测试任务'')\n    \n    for task in tasks:\n        print(f''任务 {task.id}: {task.name} - {task.status}'')\nelse:\n    print(f''数据库中已有 {existing_tasks} 个任务'')\n    tasks = db.query(DownloadTask).all()\n    for task in tasks:\n        print(f''任务 {task.id}: {task.name} - {task.status}'')\n\")",
      "Bash(PYTHONPATH=/root/project/tg python -c \"\nfrom backend.app.database import get_db\nfrom backend.app.models.rule import DownloadTask, FilterRule\nfrom backend.app.models.telegram import TelegramGroup\nfrom datetime import datetime, timezone\nimport logging\n\n# 禁用详细日志\nlogging.getLogger().setLevel(logging.ERROR)\n\ndb = next(get_db())\n\n# 创建一个测试群组（如果不存在）\ngroup = db.query(TelegramGroup).first()\nif not group:\n    group = TelegramGroup(\n        telegram_id=-1001234567890,\n        title=''Test Group'',\n        username=''test_group'',\n        member_count=100,\n        description=''Test group for task management'',\n        is_active=True\n    )\n    db.add(group)\n    db.commit()\n    print(''创建了测试群组'')\nelse:\n    print(f''使用现有群组: {group.title}'')\n\n# 创建一个测试规则（如果不存在）\nrule = db.query(FilterRule).first()\nif not rule:\n    rule = FilterRule(\n        name=''Test Rule'',\n        group_id=group.id,\n        keywords=[''test''],\n        media_types=[''photo'', ''video''],\n        is_active=True\n    )\n    db.add(rule)\n    db.commit()\n    print(''创建了测试规则'')\nelse:\n    print(f''使用现有规则: {rule.name}'')\n\n# 创建一些测试任务\nexisting_tasks = db.query(DownloadTask).count()\nif existing_tasks == 0:\n    tasks = [\n        DownloadTask(\n            name=''测试任务 - 待执行'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test1'',\n            status=''pending'',\n            progress=0,\n            total_messages=0,\n            downloaded_messages=0\n        ),\n        DownloadTask(\n            name=''测试任务 - 运行中'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test2'',\n            status=''running'',\n            progress=45,\n            total_messages=100,\n            downloaded_messages=45\n        ),\n        DownloadTask(\n            name=''测试任务 - 已完成'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test3'',\n            status=''completed'',\n            progress=100,\n            total_messages=50,\n            downloaded_messages=50\n        ),\n        DownloadTask(\n            name=''测试任务 - 已暂停'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test4'',\n            status=''paused'',\n            progress=30,\n            total_messages=80,\n            downloaded_messages=24\n        ),\n        DownloadTask(\n            name=''测试任务 - 失败'',\n            group_id=group.id,\n            rule_id=rule.id,\n            download_path=''/tmp/test5'',\n            status=''failed'',\n            progress=20,\n            total_messages=60,\n            downloaded_messages=12,\n            error_message=''测试错误消息''\n        )\n    ]\n    \n    for task in tasks:\n        db.add(task)\n    \n    db.commit()\n    print(f''创建了 {len(tasks)} 个测试任务'')\n    \n    for task in tasks:\n        print(f''任务 {task.id}: {task.name} - {task.status}'')\nelse:\n    print(f''数据库中已有 {existing_tasks} 个任务'')\n    tasks = db.query(DownloadTask).all()\n    for task in tasks:\n        print(f''任务 {task.id}: {task.name} - {task.status}'')\n\")",
      "Bash(uvicorn:*)",
      "Bash(pip3 list:*)",
      "Bash(PORT=8001 python:*)",
      "Bash(PYTHONPATH=/root/project/tg/backend /usr/bin/python3 -c \"\nimport os\nos.environ[''DATABASE_URL''] = ''sqlite:////app/data/tggod.db''\n\nfrom app.database import engine\nimport sqlalchemy as sa\n\n# Create an inspector to check existing columns\ninspector = sa.inspect(engine)\nexisting_columns = [col[''name''] for col in inspector.get_columns(''download_tasks'')]\nprint(''Current columns in download_tasks table (/app/data/tggod.db):'')\nfor col in existing_columns:\n    print(f''  - {col}'')\n\n# Check if scheduling columns exist\nscheduling_columns = [''task_type'', ''schedule_type'', ''schedule_config'', ''next_run_time'', ''last_run_time'', ''is_active'', ''max_runs'', ''run_count'']\nmissing_columns = [col for col in scheduling_columns if col not in existing_columns]\n\nif missing_columns:\n    print(f''\\nMissing scheduling columns: {missing_columns}'')\n    print(''Applying database migration to the correct database...'')\n    \n    # Add missing columns using ALTER TABLE\n    with engine.connect() as conn:\n        for col in missing_columns:\n            try:\n                if col == ''task_type'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN task_type VARCHAR(20) DEFAULT \"\"once\"\"''))\n                elif col == ''schedule_type'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN schedule_type VARCHAR(20)''))\n                elif col == ''schedule_config'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN schedule_config JSON''))\n                elif col == ''next_run_time'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN next_run_time DATETIME''))\n                elif col == ''last_run_time'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN last_run_time DATETIME''))\n                elif col == ''is_active'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN is_active BOOLEAN DEFAULT 1''))\n                elif col == ''max_runs'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN max_runs INTEGER''))\n                elif col == ''run_count'':\n                    conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN run_count INTEGER DEFAULT 0''))\n                print(f''  ✓ Added column: {col}'')\n            except Exception as e:\n                print(f''  ✗ Error adding {col}: {e}'')\n        conn.commit()\n    \n    print(''\\nDatabase migration completed!'')\nelse:\n    print(''\\nAll scheduling columns already exist in the database.'')\n\")",
      "Bash(PYTHONPATH=/root/project/tg/backend /usr/bin/python3 -c \"\nimport os\nimport asyncio\nos.environ[''DATABASE_URL''] = ''sqlite:////app/data/tggod.db''\n\nfrom app.services.task_scheduler import TaskScheduler\n\n# Test creating the scheduler and calling the correct method\nasync def test_scheduler():\n    scheduler = TaskScheduler()\n    \n    # 测试检查数据库连接\n    try:\n        await scheduler._check_and_execute_tasks()\n        print(''✅ Task scheduler database connection test successful'')\n    except Exception as e:\n        print(f''❌ Task scheduler error: {e}'')\n        import traceback\n        traceback.print_exc()\n\nif __name__ == ''__main__'':\n    asyncio.run(test_scheduler())\n\")",
      "Bash(PYTHONPATH=/root/project/tg/backend /usr/bin/python3 -c \"\nimport os\nos.environ[''DATABASE_URL''] = ''sqlite:////app/data/tggod.db''\n\nfrom app.database import engine\nimport sqlalchemy as sa\n\n# 检查 filter_rules 表的字段\nprint(''检查 filter_rules 表字段...'')\ninspector = sa.inspect(engine)\nexisting_columns = [col[''name''] for col in inspector.get_columns(''filter_rules'')]\nprint(''Current columns in filter_rules table:'')\nfor col in existing_columns:\n    print(f''  - {col}'')\n\n# 需要的字段\nrequired_fields = [''last_sync_time'', ''last_sync_message_count'', ''sync_status'', ''needs_full_resync'']\nmissing_fields = [field for field in required_fields if field not in existing_columns]\n\nif missing_fields:\n    print(f''\\nMissing filter_rules fields: {missing_fields}'')\n    print(''Adding missing fields...'')\n    \n    with engine.connect() as conn:\n        for field in missing_fields:\n            try:\n                if field == ''last_sync_time'':\n                    conn.execute(sa.text(''ALTER TABLE filter_rules ADD COLUMN last_sync_time DATETIME''))\n                elif field == ''last_sync_message_count'':\n                    conn.execute(sa.text(''ALTER TABLE filter_rules ADD COLUMN last_sync_message_count INTEGER DEFAULT 0''))\n                elif field == ''sync_status'':\n                    conn.execute(sa.text(''ALTER TABLE filter_rules ADD COLUMN sync_status VARCHAR(20) DEFAULT \"\"pending\"\"''))\n                elif field == ''needs_full_resync'':\n                    conn.execute(sa.text(''ALTER TABLE filter_rules ADD COLUMN needs_full_resync BOOLEAN DEFAULT 0''))\n                print(f''  ✓ Added field: {field}'')\n            except Exception as e:\n                print(f''  ✗ Error adding {field}: {e}'')\n        conn.commit()\n    print(''Filter rules migration completed!'')\nelse:\n    print(''\\nAll filter_rules fields exist.'')\n\")",
      "Bash(PYTHONPATH=/root/project/tg/backend /usr/bin/python3 -c \"\nimport os\nos.environ[''DATABASE_URL''] = ''sqlite:////app/data/tggod.db''\n\nfrom app.database import engine\nimport sqlalchemy as sa\n\n# 检查 download_tasks 表的字段\nprint(''检查 download_tasks 表字段...'')\ninspector = sa.inspect(engine)\n\ntry:\n    existing_columns = [col[''name''] for col in inspector.get_columns(''download_tasks'')]\n    print(''Current columns in download_tasks table:'')\n    for col in existing_columns:\n        print(f''  - {col}'')\n\n    # 需要的调度字段\n    scheduling_fields = [''task_type'', ''schedule_type'', ''schedule_config'', ''next_run_time'', ''last_run_time'', ''is_active'', ''max_runs'', ''run_count'']\n    missing_fields = [field for field in scheduling_fields if field not in existing_columns]\n\n    if missing_fields:\n        print(f''\\nMissing download_tasks fields: {missing_fields}'')\n        print(''Adding missing fields...'')\n        \n        with engine.connect() as conn:\n            for field in missing_fields:\n                try:\n                    if field == ''task_type'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN task_type VARCHAR(20) DEFAULT \"\"once\"\"''))\n                    elif field == ''schedule_type'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN schedule_type VARCHAR(20)''))\n                    elif field == ''schedule_config'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN schedule_config JSON''))\n                    elif field == ''next_run_time'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN next_run_time DATETIME''))\n                    elif field == ''last_run_time'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN last_run_time DATETIME''))\n                    elif field == ''is_active'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN is_active BOOLEAN DEFAULT 1''))\n                    elif field == ''max_runs'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN max_runs INTEGER''))\n                    elif field == ''run_count'':\n                        conn.execute(sa.text(''ALTER TABLE download_tasks ADD COLUMN run_count INTEGER DEFAULT 0''))\n                    print(f''  ✓ Added field: {field}'')\n                except Exception as e:\n                    print(f''  ✗ Error adding {field}: {e}'')\n            conn.commit()\n        print(''Download tasks migration completed!'')\n    else:\n        print(''\\nAll download_tasks scheduling fields exist.'')\n        \nexcept Exception as e:\n    print(f''Error accessing download_tasks table: {e}'')\n    print(''Table may not exist, creating it...'')\n    \n    # 如果表不存在，创建完整的表\n    from app.models.rule import Base\n    Base.metadata.create_all(engine)\n    print(''Tables created successfully!'')\n\")",
      "Bash(/usr/bin/python3:*)",
      "Bash(git reset:*)"
    ],
    "deny": []
  }
}