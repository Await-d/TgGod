kind: pipeline
type: docker
name: tggod-deploy

steps:
  - name: build-and-deploy
    image: docker:dind
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
      - name: volume1
        path: /volume1
    commands:
      - echo "清理Docker缓存以避免构建错误..."
      - docker system prune -f --volumes || true
      - docker builder prune -f || true
      
      - echo "停止并清理现有容器..."
      - docker stop tggod-backend tggod-frontend tggod-database || true
      - docker rm tggod-backend tggod-frontend tggod-database || true
  
      - echo "开始构建后端镜像..."
      - docker build -t tggod-backend:latest ./backend --no-cache
      
      - echo "开始构建前端镜像..."
      - docker build -t tggod-frontend:latest ./frontend --no-cache
      
      - echo "创建必要的目录..."
      - mkdir -p /volume1/docker/apps/tggod/data
      - mkdir -p /volume1/docker/apps/tggod/media
      - mkdir -p /volume1/docker/apps/tggod/logs
      - mkdir -p /volume1/docker/apps/tggod/config
      
      - echo "设置目录权限..."
      - chmod -R 755 /volume1/docker/apps/tggod
      - chown -R 1000:1000 /volume1/docker/apps/tggod
      
      - echo "启动数据库容器..."
      - docker run -d --name tggod-database --network 1panel-network -v /volume1/docker/apps/tggod/data:/data --restart unless-stopped -e TZ=Asia/Shanghai alpine:latest sh -c "mkdir -p /data && tail -f /dev/null"
      
      - echo "等待数据库容器启动..."
      - sleep 5
      
      - echo "启动后端容器..."
      - docker run -d --name tggod-backend --network 1panel-network -v /volume1/docker/apps/tggod/data:/app/data -v /volume1/docker/apps/tggod/media:/app/media -v /volume1/docker/apps/tggod/logs:/app/logs --restart unless-stopped -e TZ=Asia/Shanghai -e DATABASE_URL=sqlite:///./data/tggod.db -e MEDIA_ROOT=/app/media -e LOG_FILE=/app/logs/app.log -e PYTHONUNBUFFERED=1 tggod-backend:latest
      
      - echo "等待后端容器启动..."
      - sleep 10
      
      - echo "启动前端容器..."
      - docker run -d --name tggod-frontend --network 1panel-network -p 18000:80 --restart unless-stopped -e TZ=Asia/Shanghai tggod-frontend:latest
      
      - echo "验证容器状态..."
      - docker ps | grep tggod
      
      - echo "TgGod 部署完成！"
      - echo "前端访问地址 http://localhost:18000"
      - echo "后端API地址 http://localhost:18000/api"
      - echo "健康检查..."
      - sleep 5
      - curl -f http://localhost:18000/ || echo "前端健康检查失败"
    when:
      branch: master
      event: push

  - name: cleanup-cache
    image: docker:dind
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
    commands:
      - echo "开始清理Docker构建缓存..."
      - docker image prune -f --filter "until=24h" || true
      - docker container prune -f || true
      - docker builder prune -f --keep-storage 1GB || true
      - docker system df
      - echo "Docker缓存清理完成"
    when:
      status: [ success, failure ]

volumes:
  - name: docker-socket
    host:
      path: /var/run/docker.sock 
  - name: volume1
    host:
      path: /volume1

trigger:
  branch:
    - master
  event:
    - push