kind: pipeline
type: docker
name: tggod-deploy

steps:
  - name: build-and-deploy
    image: docker:dind
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
      - name: volume1
        path: /volume1
    commands:
      - echo "清理Docker缓存以避免构建错误..."
      - docker system prune -f --volumes || true
      - docker builder prune -f || true
      
      - echo "停止并清理现有容器..."
      - docker stop tggod || true
      - docker rm tggod || true
      
      - echo "清理旧的多服务容器（如果存在）..."
      - docker stop tggod-backend tggod-frontend tggod-database || true
      - docker rm tggod-backend tggod-frontend tggod-database || true
  
      - echo "开始构建TgGod单服务镜像..."
      - docker build -t tggod:latest . --no-cache
      
      - echo "创建必要的目录..."
      - mkdir -p /volume1/docker/1panel/apps/local/tggod/data
      - mkdir -p /volume1/docker/1panel/apps/local/tggod/media
      - mkdir -p /volume1/docker/1panel/apps/local/tggod/logs
      - mkdir -p /volume1/docker/1panel/apps/local/tggod/telegram_sessions
      - mkdir -p /volume1/docker/1panel/apps/local/tggod/config
      
      - echo "设置目录权限..."
      - chmod -R 755 /volume1/docker/1panel/apps/local/tggod
      - chown -R root:root /volume1/docker/1panel/apps/local/tggod
      
      - echo "启动TgGod单服务容器..."
      - docker run -d --name tggod --network 1panel-network -p 10200:80 -v /volume5/HP-16/video/HP-16:/downloads -v /volume1/docker/1panel/apps/local/tggod/data:/app/data -v /volume1/docker/1panel/apps/local/tggod/media:/app/media -v /volume1/docker/1panel/apps/local/tggod/logs:/app/logs -v /volume1/docker/1panel/apps/local/tggod/telegram_sessions:/app/telegram_sessions --restart unless-stopped -e TZ=Asia/Shanghai -e DATABASE_URL=sqlite:////app/data/tggod.db -e MEDIA_ROOT=/app/media -e LOG_FILE=/app/logs/app.log -e PYTHONUNBUFFERED=1 -e TELEGRAM_API_ID="$${TELEGRAM_API_ID}" -e TELEGRAM_API_HASH="$${TELEGRAM_API_HASH}" -e TELEGRAM_BOT_TOKEN="$${TELEGRAM_BOT_TOKEN}" -e SECRET_KEY="$${SECRET_KEY}" tggod:latest
      
      - echo "等待服务启动..."
      - sleep 5
      
      - echo "验证容器状态..."
      - docker ps | grep tggod
      
      - echo "健康检查..."
      - sleep 10
      - curl -f http://localhost:10200/health || echo "健康检查失败，正在重试..."
      - sleep 5
      - curl -f http://localhost:10200/health || echo "健康检查仍然失败"
      
      - echo "检查容器日志..."
      - docker logs --tail 20 tggod
      
      - echo "检查服务端点..."
      - curl -s http://localhost:10200/ | head -20 || echo "前端页面检查失败"
      - curl -s http://localhost:10200/docs | head -20 || echo "API文档检查失败"
      
      - echo "TgGod 单服务部署完成！"
      - echo "访问地址 - http://localhost:10200"
      - echo "API文档 - http://localhost:10200/docs"
      - echo "健康检查 - http://localhost:10200/health"
    when:
      branch: master
      event: push

  - name: cleanup-cache
    image: docker:dind
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
    commands:
      - echo "开始清理Docker构建缓存..."
      - docker image prune -f --filter "until=24h" || true
      - docker container prune -f || true
      - docker builder prune -f --keep-storage 1GB || true
      - docker system df
      - echo "Docker缓存清理完成"
    when:
      status: [ success, failure ]

volumes:
  - name: docker-socket
    host:
      path: /var/run/docker.sock 
  - name: volume1
    host:
      path: /volume1

trigger:
  branch:
    - master
  event:
    - push